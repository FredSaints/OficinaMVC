@model OficinaMVC.Models.Communication.CommunicationViewModel
@{
    ViewData["Title"] = "Send Announcement to All Clients";
}

<!-- Full-screen Loading Overlay with Progress Bar -->
<div id="loading-overlay" class="d-none">
    <div class="progress-container">
        <h4 class="text-primary">Sending Announcements...</h4>
        <div class="progress" style="height: 25px;" role="progressbar" aria-label="Email sending progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
            <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0%;">0%</div>
        </div>
        <p id="progress-text" class="mt-2 text-muted">Initializing...</p>
        <button id="progress-done-btn" class="btn btn-success mt-3 d-none">Done</button>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-lg-9">
        <form asp-action="SendAnnouncement" method="post" id="announcement-form" class="card shadow-lg border-0 mt-4">
            <div class="card-header bg-primary text-white py-3">
                <h2 class="mb-0 text-center"><i class="bi bi-megaphone-fill me-2"></i>@ViewData["Title"]</h2>
            </div>
            <div class="card-body p-4 p-md-5">
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                <div class="mb-4">
                    <label asp-for="Subject" class="form-label fs-5"></label>
                    <input asp-for="Subject" class="form-control form-control-lg" placeholder="e.g., Important Workshop Notice" />
                    <span asp-validation-for="Subject" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Message" class="form-label fs-5"></label>
                    <textarea asp-for="Message" id="richTextEditor"></textarea>
                    <span asp-validation-for="Message" class="text-danger small"></span>
                </div>
            </div>
            <div class="card-footer bg-light text-end p-3">
                <a asp-action="Index" class="btn btn-secondary btn-lg px-4 me-2">
                    <i class="bi bi-x-lg me-1"></i> Cancel
                </a>
                <button type="submit" id="send-button" class="btn btn-primary btn-lg px-5">
                    <i class="bi bi-send-fill me-1"></i>
                    <span id="send-button-text">Send to All</span>
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.tiny.cloud/1/fp1fr7zgyy3ssl8p8jx4z1uyl7c1bpai8kufxq5izc08f0b3/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            tinymce.init({
                selector: '#richTextEditor',
                height: 400,
                menubar: false,
                plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'help', 'wordcount'],
                toolbar: 'undo redo | blocks | bold italic forecolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }',
                setup: function (editor) {
                    editor.on('change', function () {
                        editor.save();
                    });
                }
            });

            const form = document.getElementById('announcement-form');
            const sendButton = document.getElementById('send-button');
            const loadingOverlay = document.getElementById('loading-overlay');
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');
            const doneButton = document.getElementById('progress-done-btn');

            // --- SignalR Setup ---
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .build();

            connection.on("progressUpdate", (progress, sent, total) => {
                const progressVal = Math.round(progress);
                progressBar.style.width = progressVal + '%';
                progressBar.textContent = progressVal + '%';
                progressBar.setAttribute('aria-valuenow', progressVal);
                progressText.textContent = `Sent ${sent} of ${total} emails...`;
            });

            connection.on("progressComplete", (message) => {
                progressBar.classList.remove('progress-bar-animated', 'progress-bar-striped');
                progressBar.classList.add('bg-success');
                progressText.textContent = message;
                doneButton.classList.remove('d-none');
            });

            // --- Main Application Logic ---
            async function initialize() {
                try {
                    // **CRUCIAL:** Wait for the connection to be established.
                    await connection.start();
                    console.log("SignalR Connected with ID: ", connection.connectionId);
                    // Enable the send button only AFTER the connection is ready.
                    sendButton.disabled = false;
                } catch (err) {
                    console.error("SignalR Connection Error: ", err.toString());
                    progressText.textContent = "Error: Could not connect to the notification service. Please refresh the page.";
                    // Keep button disabled if connection fails
                }
            }

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                tinymce.triggerSave();

                // Check if connection is established before submitting
                if (connection.state !== signalR.HubConnectionState.Connected) {
                    alert("Still connecting to the server, please wait a moment and try again.");
                    return;
                }

                if ($(form).valid()) {
                    sendButton.disabled = true;
                    loadingOverlay.classList.remove('d-none');
                    setTimeout(() => loadingOverlay.classList.add('visible'), 10);

                    $.ajax({
                        url: $(form).attr('action'),
                        type: 'POST',
                        data: $(form).serialize(),
                        headers: {
                            'X-SignalR-Connection-Id': connection.connectionId
                        },
                        success: function(response) {
                            console.log("Email job successfully queued:", response.message);
                        },
                        error: function(xhr) {
                            alert('Failed to start the email job: ' + (xhr.responseJSON?.message || xhr.responseText));
                            loadingOverlay.classList.add('d-none');
                            sendButton.disabled = false;
                        }
                    });
                }
            });

            doneButton.addEventListener('click', function() {
                window.location.href = '@Url.Action("Index", "Communication")';
            });

            // Initially disable the send button until SignalR is connected
            sendButton.disabled = true;
            initialize(); // Start the initialization process
        });
    </script>
}